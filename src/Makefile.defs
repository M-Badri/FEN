# Fortran compiler
FC = mpif90

# Setting the source code directory
SRC = $(FEN_DIR)/src

# Setting temporary directory for compiled mod and objects
ODIR = ./.fobj
MDIR = ./.fmod

# Flags
override BIG=#-mcmodel=large
override DBG=#-g -Wall -fcheck=bounds -ffpe-trap=invalid,zero,overflow
override PROF=#-pg
override OPT=#-O3
override CPPDEFS+=-cpp
override FLAGS = $(BIG) $(DBG) $(PROF) $(OPT) $(CPPDEFS) -J$(MDIR) -I$(MDIR)

# Select all objects request by the SOURCE
ifeq "$(SOURCE)" ""
	SOBJ =
else
	SOBJ := $(shell python3 $(SRC)/get_objects.py $(SOURCE))
endif

# Libraries dir
INCLUDE_2DECOMP = -I$(_2DECOMP_DIR)/include
INCLUDE_FFTW3 = -I$(FFTW3_DIR)/include
LIB_2DECOMP = -L$(_2DECOMP_DIR)/lib -l2decomp_fft
LIB_FFTW3 = -L$(FFTW3_DIR)/lib -lfftw3
LIBS = $(LIB_2DECOMP) $(LIB_FFTW3) -llapack

# The executable file is called run.e
target: run.e

.PHONY: clean

# Rule for the executable run.e
run.e: $(SOURCE) $(SOBJ)
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -o $@ $(SOURCE) $(ODIR)/* $(LIBS)

# Rule for solver module
solver.o: $(SRC)/solver.f90 precision.o grid.o poisson.o navier_stokes.o volume_of_fluid.o multiphase.o# fsi.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for multiphase module
multiphase.o: $(SRC)/multiphase.f90 precision.o scalar.o vector.o IO.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for volume of fluid module
volume_of_fluid.o: $(SRC)/volume_of_fluid.f90 precision.o global.o scalar.o vector.o IO.o utils.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for navier_stokes module
navier_stokes.o: $(SRC)/navier_stokes.f90 precision.o global.o grid.o scalar.o vector.o tensor.o fields.o poisson.o \
                volume_of_fluid.o multiphase.o# non_newtonian.o ibm.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for lagrangian solid module
lagrangian_solid.o: $(SRC)/lagrangian_solid.f90 precision.o global.o marker.o IO.o utils.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for marker module
marker.o: $(SRC)/marker.f90 precision.o
	$(FC)$(FLAGS) -c $< -o $(ODIR)/$@

# Rule for poisson module
poisson.o: $(SRC)/poisson.f90 precision.o global.o grid.o scalar.o IO.o
	$(FC) $(INCLUDE_2DECOMP) $(INCLUDE_FFTW3) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for fields module
fields.o: $(SRC)/fields.f90 precision.o grid.o scalar.o vector.o tensor.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for tensor module
tensor.o: $(SRC)/tensor.f90 precision.o grid.o vector.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for vector module
vector.o: $(SRC)/vector.f90 precision.o grid.o scalar.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for scalar module
scalar.o: $(SRC)/scalar.f90 precision.o grid.o halo.o IO.o function.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for halo module
halo.o: $(SRC)/halo.f90 precision.o grid.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for grid module
grid.o: $(SRC)/grid.f90 precision.o global.o IO.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for utils module
utils.o: $(SRC)/utils.f90 precision.o IO.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for function module
function.o: $(SRC)/function.f90 precision.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for IO module
IO.o: $(SRC)/IO.f90
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for global module
global.o: $(SRC)/global.f90 precision.o
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# Rule for precision module
precision.o: $(SRC)/precision.f90
	$(FC) $(FLAGS) -c $< -o $(ODIR)/$@

# class_eulerian_solid.o: $(FEN_DIR)/src/class_eulerian_solid.f90 precision.o utils.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# mls.o: $(FEN_DIR)/src/mls.f90 precision.o class_Grid.o constants.o class_Scalar.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# lagrangian_ibm.o: $(FEN_DIR)/src/lagrangian_ibm.f90 precision.o class_Grid.o constants.o mls.o class_Scalar.o class_Vector.o lagrangian_solid.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# polynomial_reconstruction.o: $(FEN_DIR)/src/polynomial_reconstruction.f90 precision.o class_Grid.o functions.o
# 	$(FC) $(FLAGS) -c $< -llapack

# eulerian_ibm.o: $(FEN_DIR)/src/eulerian_ibm.f90 precision.o class_Vector.o class_Grid.o class_Tensor.o class_eulerian_solid.o utils.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# ibm.o: $(FEN_DIR)/src/ibm.f90 precision.o class_Vector.o class_eulerian_solid.o eulerian_ibm.o lagrangian_solid.o lagrangian_ibm.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# non_newtonian.o: $(FEN_DIR)/src/non_newtonian.f90 precision.o class_Grid.o class_Scalar.o class_Tensor.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

# fsi.o: $(FEN_DIR)/src/fsi.f90 precision.o class_eulerian_solid.o eulerian_ibm.o navier_stokes.o
# 	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

clean:
	rm -rf $(ODIR)/*.o $(MDIR)/*.mod .objects run.e *compilation_log *compilation_warnings