# Fortran compiler
FC = mpif90

# Flags
override BIG=#-mcmodel=large
override DBG=#-g -Wall -fcheck=bounds -ffpe-trap=invalid,zero,overflow
override PROF=#-pg
override OPT=#-O3
override CNNFLAGS+=-cpp
override FLAGS = $(BIG) $(DBG) $(PROF) $(OPT) $(CNNFLAGS)

# Libraries dir
INCLUDE_2DECOMP = -I$(_2DECOMP_DIR)/include
FFTW3_DIR = $(HOME)/local
INCLUDE_FFTW3 = -I$(FFTW3_DIR)/include
LIB_2DECOMP = -L$(_2DECOMP_DIR)/lib -l2decomp_fft
LIB_FFTW3 = -L$(FFTW3_DIR)/lib -lfftw3
LIBS = $(LIB_2DECOMP) $(LIB_FFTW3) -llapack

override OBJ = precision.o constants.o io.o class_Grid.o halo.o class_Scalar.o class_Vector.o tensors.o fields.o Poisson.o \
      			volume_of_fluid.o multiphase.o utils.o non_newtonian.o navier_stokes.o solver.o json.o eulerian_ibm.o \
				class_eulerian_solid.o ibm.o polynomial_reconstruction.o

target: code.e

precision.o: $(FEN_DIR)/src/precision.f90
	$(FC) $(FLAGS) -c $<
	
constants.o: $(FEN_DIR)/src/constants.f90
	$(FC) $(FLAGS) -c $<

io.o: $(FEN_DIR)/src/io.f90
	$(FC) $(FLAGS) -c $<
	
class_Grid.o: $(FEN_DIR)/src/class_Grid.f90 precision.o constants.o io.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

halo.o: $(FEN_DIR)/src/halo.f90 precision.o class_Grid.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

class_Scalar.o: $(FEN_DIR)/src/class_Scalar.f90 class_Grid.o precision.o halo.o io.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

class_Vector.o: $(FEN_DIR)/src/class_Vector.f90 class_Grid.o precision.o class_Scalar.o halo.o io.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

class_eulerian_solid.o: $(FEN_DIR)/src/class_eulerian_solid.f90 precision.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

polynomial_reconstruction.o: $(FEN_DIR)/src/polynomial_reconstruction.f90 precision.o class_Grid.o
	$(FC) $(FLAGS) -c $< -llapack

eulerian_ibm.o: $(FEN_DIR)/src/eulerian_ibm.f90 precision.o class_Vector.o class_Grid.o class_eulerian_solid.o utils.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

ibm.o: $(FEN_DIR)/src/ibm.f90 precision.o class_Vector.o class_eulerian_solid.o eulerian_ibm.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

tensors.o: $(FEN_DIR)/src/tensors.f90 class_Grid.o precision.o class_Scalar.o class_Vector.o halo.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

fields.o: $(FEN_DIR)/src/fields.f90 precision.o class_Grid.o class_Scalar.o class_Vector.o tensors.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

Poisson.o: $(FEN_DIR)/src/Poisson.f90 precision.o class_Grid.o class_Scalar.o io.o constants.o 
	$(FC) $(INCLUDE_2DECOMP) $(INCLUDE_FFTW3) $(FLAGS) -c $<

volume_of_fluid.o: $(FEN_DIR)/src/volume_of_fluid.f90 precision.o class_Scalar.o class_Vector.o io.o constants.o io.o utils.o
	$(FC) $(INCLUDE_2DECOMP) $(INCLUDE_FFTW3) $(FLAGS) -c $<

multiphase.o: $(FEN_DIR)/src/multiphase.f90 precision.o class_Scalar.o class_Vector.o io.o
	$(FC) $(INCLUDE_2DECOMP) $(INCLUDE_FFTW3) $(FLAGS) -c $<

utils.o: $(FEN_DIR)/src/utils.f90 precision.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

non_newtonian.o: $(FEN_DIR)/src/non_newtonian.f90 precision.o class_Grid.o class_Scalar.o tensors.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

navier_stokes.o: $(FEN_DIR)/src/navier_stokes.f90 precision.o constants.o class_Grid.o class_Scalar.o class_Vector.o tensors.o fields.o Poisson.o volume_of_fluid.o multiphase.o non_newtonian.o ibm.o
	$(FC) $(FLAGS) -c $<

json.o: $(FEN_DIR)/src/json.f90 class_Grid.o
	$(FC) $(INCLUDE_2DECOMP) $(FLAGS) -c $<

solver.o: $(FEN_DIR)/src/solver.f90 precision.o class_Grid.o Poisson.o navier_stokes.o volume_of_fluid.o multiphase.o
	$(FC) $(FLAGS) -c $<

clean:
	rm -f *.o *.mod code.e *.json

clean_data:
	rm -rf data/*

